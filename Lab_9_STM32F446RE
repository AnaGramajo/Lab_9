// Universidad del Valle
// Digital 2
// Ana Gramajo
// Recibe el valor del potenciómetro seleccionado (mediante un botón) y luego lo muestra en el display de 7 segmentos. 

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart6; // Puerto serial utilizado para la comunicación UART

/* USER CODE BEGIN PV */
int leerP1 = 0; // Variable para ver cuando el botón 1 se presiona
int leerP2 = 0; // Variable para ver cuando el botón 2 se presiona
char buffer[50]; // Variable para guardar la información recibida
int pot1; // Valor del potenciómetro 1
int pot2; // Valor del potenciómetro 2
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void desplegarDisplay(int numero); // Función para mostrar el valor en el display de 7 segmentos
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (leerP1==1) { // Si se presiona el botón 1
		  leerP1=0; // Se reestablece el estado de la variable
		  HAL_UART_Receive(&huart6, (uint8_t*)buffer, sizeof(buffer), 1000); // Se lee la información enviada por el ESP32
		  // La información se envía de la forma "pot1,pot2", por lo que es posible separar los valores mediante la coma
      sscanf(buffer, "%lu,%lu", &pot1, &pot2);
      // Se enciende el display 1
		  HAL_GPIO_WritePin(dis1_GPIO_Port, dis1_Pin, 0);
      // Se apaga el display 2
		  HAL_GPIO_WritePin(dis2_GPIO_Port, dis2_Pin, 1);
      // Se envía el valore del potenciómetro 1 al display 1
		  desplegarDisplay(pot1);
      // Se "toggle" una led para verificar el funcionamiento de la interrupción
		  HAL_GPIO_TogglePin(userLed_GPIO_Port, userLed_Pin);

		  HAL_Delay(2000);
	  }
	  if (leerP2==1) { // Si se presiona el botón 2
		  leerP2=0; // Se reestablece el estado de la variable
		  HAL_UART_Receive(&huart6, (uint8_t*)buffer, sizeof(buffer), 1000); // Se lee la información enviada por el ESP32
		  // La información se envía de la forma "pot1,pot2", por lo que es posible separar los valores mediante la coma
      sscanf(buffer, "%lu,%lu", &pot1, &pot2);
      // Se apaga el display 1 
		  HAL_GPIO_WritePin(dis1_GPIO_Port, dis1_Pin, 1);
      // Se enciende el display 2
		  HAL_GPIO_WritePin(dis2_GPIO_Port, dis2_Pin, 0);
      // Se envía el valore del potenciómetro 2 al display 2
		  desplegarDisplay(pot2);
      // Se "toggle" una led para verificar el funcionamiento de la interrupción
		  HAL_GPIO_TogglePin(userLed_GPIO_Port, userLed_Pin);
		  HAL_Delay(2000);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, f_Pin|g_Pin|dis2_Pin|dis1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(userLed_GPIO_Port, userLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, e_Pin|d_Pin|c_Pin|b_Pin
                          |a_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : f_Pin g_Pin dis2_Pin dis1_Pin */
  GPIO_InitStruct.Pin = f_Pin|g_Pin|dis2_Pin|dis1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_P2_Pin BTN_P1_Pin */
  GPIO_InitStruct.Pin = BTN_P2_Pin|BTN_P1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : userLed_Pin */
  GPIO_InitStruct.Pin = userLed_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(userLed_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : e_Pin d_Pin c_Pin b_Pin
                           a_Pin */
  GPIO_InitStruct.Pin = e_Pin|d_Pin|c_Pin|b_Pin
                          |a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Interrupciones
{
  if (HAL_GPIO_ReadPin(BTN_P1_GPIO_Port, BTN_P1_Pin)) {
    // Cuando se presiona el botón la variable se coloca en 1
	  leerP1 = 1;
  }
  if (HAL_GPIO_ReadPin(BTN_P2_GPIO_Port, BTN_P2_Pin)) {
    // Cuando se presiona el botón la variable se coloca en 1
	  leerP2 = 1;
  }
}

void desplegarDisplay(int numero) {
	switch (numero) { // Según el valor enviado se accede al casa correspondiente
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
			break;
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
			break;
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
			break;
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 10: //A
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 11: //b
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 12: //C
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
			break;
		case 13: //d
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 14: //E
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		case 15: //F
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
			break;
		default:
			break;
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
